---
name: Deploy Fusion Bundle to Sandbox

on:
  push:
    # Adjust this list of branches if you want to use this action
    # for PRs and pushes.
    branches:
      - sandbox
  # This action lets you run this Action manually.
  workflow_dispatch:

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      # This step just sets some basic configs. Use this section
      # to change parameters for your organization.
      - name: Config settings
        if: ${{ success() }}

        # This is where you can change parameters which control this
        # GitHub Action.
        env:
          API_HOSTNAME: "api.sandbox.arctesting2.arcpublishing.com"
          API_TOKEN: "${{ secrets.SANDBOX_DEPLOYER_TOKEN }}"
          BUNDLE_NAME_PREFIX: "arcxp-demo-1"
          RETRY_LIMIT: 60
          RETRY_DELAY: 5

        ## DO NOT CHANGE ANYTHING BELOW THIS LINE
        ## UNLESS YOU KNOW WHAT YOU'RE DOING
        run: |
          echo "endpoint=$API_HOSTNAME" >> $GITHUB_ENV
          echo "token=$API_TOKEN" >> $GITHUB_ENV
          echo "bundle_name=$BUNDLE_NAME_PREFIX-$(date +%s)-${GITHUB_REF_NAME}-${GITHUB_SHA}" >> $GITHUB_ENV
          echo "retry_limit=$RETRY_LIMIT" >> $GITHUB_ENV
          echo "retry_delay=$RETRY_DELAY" >> $GITHUB_ENV

      # This checks out the code.
      - name: Checkout the code
        if: ${{ success() }}
        uses: actions/checkout@v3

      # This configures NodeJS for our purposes.
      - name: Set up Node
        if: ${{ success() }}
        uses: actions/setup-node@v3
        with:
          #### IF YOU NEED TO CHANGE YOUR NODE VERSION, JUST CHANGE THIS NUMBER
          node-version: 18
          cache: npm

      # Installs NodeJS dependencies.
      - name: Install dependencies
        if: ${{ success() }}
        run: |
          npm install

      # Build the code.
      - name: Build the Fusion Bundle
        if: ${{ success() }}
        run: |
          npm run build
          npm run zip

      # This checks the current version after we deploy but before we promote.
      # After we deploy, there should be a newer version number, so that'll
      # let us know that our upload worked.
      - name: Fetch the existing current versions
        if: ${{ success() }}
        run: |
          curl \
            -H 'Accept: application/json' \
            -H "Authorization: Bearer ${{ env.token }}" \
            -o __VERSIONS__.json \
            "https://${{ env.endpoint }}/deployments/fusion/services"
          if [ $? -ne 0 ]; then
            echo "::error title=Versions call failed::Versions call failed. Try rerunning with debug flags enabled."
            exit 1
          fi

          PRIOR_VERSION=$(jq -r '.lambdas[-1].Version' __VERSIONS__.json)
          OLDEST_VERSION=$(jq -r '.lambdas[0].Version' __VERSIONS__.json)

          if [ -z $PRIOR_VERSION -o -z $OLDEST_VERSION ]; then
            echo "::error title=Unable to determine versions::Unable to determine versions. Try rerunning with debug flags enabled."
            exit 1
          fi

          echo "prior_version=$PRIOR_VERSION" >> $GITHUB_ENV
          echo "oldest_version=$OLDEST_VERSION" >> $GITHUB_ENV

      # Upload the bundle to ArcXP Fusion.
      - name: Upload the Fusion Bundle
        if: ${{ success() }}
        run: |
          curl \
            -H 'Accept: application/json' \
            -H "Authorization: Bearer ${{ env.token }}" \
            -F "name=${{ env.bundle_name }}" \
            -F "bundle=@dist/fusion-bundle.zip" \
            -o __UPLOAD_OUTPUT__ \
            "https://${{ env.endpoint }}/deployments/fusion/bundles"

          if [ $? -ne 0 ]; then
            echo "::error title=Upload call failed::Upload call failed. Try rerunning with debug flags enabled."
            exit 1
          fi

      - name: Terminate Old Version
        if: ${{ success() }}
        run: |
          curl \
            -H 'Accept: application/json' \
            -H "Authorization: Bearer ${{ env.token }}" \
            -o __TERMINATE_OUTPUT__ \
            -X POST \
            "https://${{ env.endpoint }}/deployments/fusion/services/${{ env.oldest_version }}/terminate"

          if [ $? -ne 0 ]; then
            echo "::error title=Terminate call failed::Terminate call failed. Try rerunning with debug flags enabled."
            exit 1
          fi

      # Deploy the new version
      - name: Deploy the Fusion Bundle
        if: ${{ success() }}
        run: |
          curl \
            -H 'Accept: application/json' \
            -H "Authorization: Bearer ${{ env.token }}" \
            -o __DEPLOY_OUTPUT__ \
            -X POST \
            "https://${{ env.endpoint }}/deployments/fusion/services?bundle=${{ env.bundle_name }}&version=latest"

          if [ $? -ne 0 ]; then
            echo "::error title=Deploy call failed::Deploy call failed. Try rerunning with debug flags enabled."
            exit 1
          fi

      # Verify that after the upload we have a new version.
      - name: Verify that the Upload Worked
        if: ${{ success() }}
        run: |
          KEEP_TRYING=${{ env.retry_limit }}
          CHECK_VERSION=""

          # This retry loop is here to accommodate the time it takes for Fusion to deploy a new bundle.
          while [ $KEEP_TRYING -gt 0 ]; do
            echo "RETRIES REMAINING: $KEEP_TRYING"
            KEEP_TRYING=$(( KEEP_TRYING - 1 ))
            curl \
              -H 'Accept: application/json' \
              -H "Authorization: Bearer ${{ env.token }}" \
              -o __VERSIONS__.json \
              "https://${{env.endpoint}}/deployments/fusion/services"

            if [ $? -ne 0 ]; then
              echo "::error title=Second versions call failed::Versions call failed. Try rerunning with debug flags enabled."
              exit 1
            fi

            CHECK_VERSION=$(jq -r '.lambdas[-1].Version' __VERSIONS__.json)
            if [ -z $CHECK_VERSION ]; then
              echo "::error title=Unable to determine version post-deploy::Unable to parse the version number following the deployment. Try rerunning with debug flags enabled."
              exit 1
            fi

            if [ $CHECK_VERSION -gt ${{ env.prior_version }} ]; then
              break
            fi
            sleep ${{ env.retry_delay }}
          done

          if [ ${{ env.prior_version }} -ge $CHECK_VERSION ]; then
            echo "::error title=Failed to upload the bundle::It seems like the upload to ArcXP Fusion failed. Please check the deployment tools, or re-run with debug flags enabled to further troubleshoot.\nThe old version is ${{ env.prior_version }} and the new version is $CHECK_VERSION."
            exit 1
          else
            echo "::notice title=Upload worked::Upload appears to have worked fine."
          fi

          echo "new_version=$CHECK_VERSION" >> $GITHUB_ENV

      # Now it's time to promote the version!
      - name: Promote the new version.
        if: ${{ success() }}
        run: |
          curl \
          -H 'Accept: application/json' \
          -H "Authorization: Bearer ${{ env.token }}" \
          -X POST \
          -o __PROMOTE_OUTPUT__ \
          "https://${{ env.endpoint }}/deployments/fusion/services/${{ env.new_version }}/promote"

          if [ $? -ne 0 ]; then
            echo "::error title=Promote call failed::Promote call failed. Try rerunning with debug flags enabled."
            exit 1
          fi
